unit Thread;

interface

uses
 Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ExtCtrls, Vcl.ComCtrls;

type
  TMeuProcesso = class(TThread)
  protected
    procedure Execute; override;
  end;

implementation

uses
  UExercicio7;

{ TMeuProcesso }

procedure TMeuProcesso.Execute;
var
  contador, Sleep,
   Sleep1, Sleep2: integer;
begin

  Priority := tpLower;

  Sleep1 := StrToInt(_Valor1);
  Sleep2 := StrToInt(_Valor2);

  FormExercicio7.ProgressBar1.Max := 100;
  FormExercicio7.ProgressBar2.Max := 100;

  FormExercicio7.ProgressBar1.Position := Sleep1;

//  for contador := 1 to 100 do
//  begin
//    FormExercicio7.ProgressBar1.Position := Sleep1;
//  end;

//  for contador := 1 to 100 do
//  begin
//    FormExercicio7.ProgressBar2.Position := Sleep2;
//  end;

  inherited;
end;

end.
